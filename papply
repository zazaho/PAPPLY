#!/usr/bin/python3
'Apply a shell command in parallel by using a multiprocessing.pool'
import sys
import os
import subprocess
import time
from multiprocessing import Pool, cpu_count

def papply_variables_from_argument(argument):
    'Extract variables (directory, name,  extension) from the argument'

    dirname = os.path.dirname(argument)
    name_with_extension = os.path.basename(argument)
    name_without_extension, extension = os.path.splitext(name_with_extension)

    return {'%F' : argument,
            '%d' : dirname,
            '%f' : name_with_extension,
            '%n' : name_without_extension,
            '%e' : extension,
            '%z' : ''}

def papply_one(argument):
    'Apply the command to one argument'

    # the original command passed on the command line
    command = sys.argv[1]

    # replace special strings with values
    variables_from_argument = papply_variables_from_argument(argument)
    command_expanded = command
    for template, value in variables_from_argument.items():
        command_expanded = command_expanded.replace(template, value)

    # if the command is not expanded add the argument to the basic command
    # otherwise assume that the command_expanded is complete
    if command_expanded == command:
        command_expanded = command+' '+argument

    try:
        reply = subprocess.check_output(command_expanded,
                                        universal_newlines=True,
                                        shell=True,
                                        stderr=subprocess.DEVNULL)
        # if there was output to stdout print it here
        if reply:
            print(reply.rstrip('\r\n'))
    except subprocess.CalledProcessError:
        # something went wrong inform the user
        print('"%s" did not succeed' % command_expanded)


def papply_main():
    'Main routine of papply. It creates the multiprocessing pool.'

    if len(sys.argv) < 3:
        print('Usage: papply "some command with arguments" files')
        print('Example: papply "gzip -9" *.ps')
        print('')
        print('The following variables can used in the command:')
        print(' %F: Full original input')
        print(' %d: directory name (no trailing slash)')
        print(' %f: file name with extension')
        print(' %n: file name without extension')
        print(' %e: extension (with leading .)')
        print(' %z: empty string')
        print('')
        print('Example: papply "convert -set colorspace Gray %F %n_gray.jpg" *.ps')
        sys.exit()

    # sys.argv[1] is the command line to call in parallel
    # anything after sys.argv[1] are arguments to this command line
    arguments = sys.argv[2:]
    narguments = len(arguments)

    num_cores = cpu_count()
    # keep it nice and busy
    overcommitment_value = 2
    pool = Pool(num_cores*overcommitment_value)

    # register when we start the pool
    start_time = time.monotonic()
    long_running = False

    res = pool.imap(papply_one, arguments)

    # Loop over the number of arguments to track the progress
    for i in range(narguments):

        # this continues when the iterated map has given the next result
        dummy = res.next()

        # when this starts to be a long running process print percentage (10%) progress
        if long_running:
            if (i / narguments * 100)%10 == 0:
                print("PAPPLY: %s of %s commands executed" % (i, narguments))
        else:
            # check to see if it is long running
            long_running = (time.monotonic() - start_time > 60) # seconds since start of pool

    pool.close()
    pool.join()

if __name__ == '__main__':
    papply_main()
